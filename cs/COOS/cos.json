{
  "存储器": {
    "物理结构": {
      "半导体存储器": {
        "芯片": {
          "存储矩阵": {
            "RAM": {
              "特点": "支持随机访问读写",
              "SRAM": {
                "用途": "cache",
                "特点": "非破坏性读写,不需要刷新"
              },
              "DRAM": {
                "特点": "密度比sram高,功耗低",
                "用途": "m",
                "读周期": "地址线信号在,读周期在,地址线信号亡,读周期亡",
                "刷新": {
                  "特征": "行刷新,对cpu透明",
                  "集中刷新": "刷新周期:2ms,死区率:刷新所有行的时间/刷新周期",
                  "分散刷新": "存储周期 = 读/写周期 + 刷新一行的时间",
                  "异步刷新": "每隔多少时间刷新一行,死时间 = 一个读写周期"
                }
              }
            },
            "ROM": {
              "特点": "支持随机访问,只读不写,密度比ram高",
              "MROM": "掩模式,出厂时写入",
              "PROM": "一次可编程",
              "EPROM": "可擦除可编程,多次改写",
              "EEPROM": "电可擦除可编程,IC卡",
              "flash": "闪存,非易失,可写,读比写快",
              "SSD": "基于flash,读写单位是页,可磨损"
            }
          },
          "译码驱动": {
            "单译码": "行地址线,选中某一行",
            "双译码": "行列地址线,可选中某个元素"
          },
          "电路": {
            "控制线": {
              "we": "SRAM默认两个读写线路",
              "cs": "片选通信号",
              "RAS/CAS": "DRAM使用地址引脚服用技术,行列地址分两次送的控制信号"
            },
            "地址线": "单向",
            "数据线": "双向"
          }
        }
      },
      "串行访问存储器": {
        "直接存储DAM": "CD-ROM",
        "顺序存储SAM": "磁带"
      }
    },
    "编址": {
      "高m位": "主存的块(页)地址",
      "低n位": "块内字节数"
    },
    "芯片扩充": {
      "位扩充": "",
      "字扩充": "",
      "字位扩充": ""
    },
    "加速技术": {
      "双口ram": "",
      "单体多字": "",
      "多模块": {
        "高位交叉编址": "并行性:不同请求源并行访问不同体",
        "低位交叉编址": "并行性:同一请求源并行访问不同体"
      }
    },
    "cache": {
      "作用": "解决cpu和m速度不匹配问题,解决cpu等待外部设备访问m的时间",
      "trait": "透明",
      "cache-m效率": "e = 访问cache时间/平均访问时间",
      "解决流水线冲突": [
        "l1 data cache",
        "l1 code cache"
      ],
      "addressing": {
        "高m位": "cache块号",
        "低n位": "块内字节数"
      },
      "mapping": {
        "直接映射": "不够灵活;冲突概率高(抖动);适合大容量cache",
        "全相联映射": {
          "pros": "减少冲突率",
          "cons": "tag数位增加;适合小容量cache",
          "phy": "相联存储器"
        },
        "组相联映射": {
          "m-ad": {
            "高位tag": "",
            "中间组号group": "log2cache组数"
          }
        }
      },
      "Replacement": {
        "fifo": "开销小,不记录使用情况,不提高cache命中率",
        "lru": "近期最少使用"
      },
      "写策略": {
        "写回法": "命中后只修改cache不修改m被替换时修改,未命中后将m调入cache再修改",
        "全写法": "同时修改cache和m,未命中只修改m"
      }
    }
  },
  "总线": {
    "index": {
      "width": "数据总线的宽度w",
      "bandwidth": "单位时间传输数据的位数bw = f * w"
    },
    "系统总线": {
      "特性": "不能分开单独连接设备",
      "控制总线": "微单",
      "数据总线": "双向",
      "地址总线": "单向"
    },
    "结构": {
      "单总线": "io与m共用一组ad线,所以可以统一编址",
      "双总线": "io总线和m总线,io写入m需要经过cpu",
      "三总线": "io接口有DMA总线直接连接m,任意时刻只能使用一种总线,m bus和dma bus不能同时对m进行存取,io bus只有在cpu执行io code时使用"
    },
    "period": {
      "申请": "申请模块提出总线申请,经总线仲裁机器决定下一个传输周期的总线使用权",
      "寻址": "主模块发出地址和命令,启动从模块",
      "传送": "主模块和从模块数据交换",
      "结束": "主模块信息从系统总线撤出,让出总线使用权"
    },
    "通信方式": {
      "同步定时": "不管输入输出,地址信号一定是全程陪伴,传送速度快,会按照最慢的模块设计公共时钟",
      "异步定时": [
        "不互锁",
        "半互锁",
        "全互锁"
      ]
    },
    "标准": {
      "系统总线": [
        "ISA",
        "EISA",
        "VESA",
        "PCI",
        "PCI-e"
      ],
      "设备总线": [
        "IDE",
        "AGP",
        "USB:1b",
        "SATA:1b"
      ]
    }
  },
  "IO": {
    "设备": {
      "外部存储": {
        "ssd": {
          "ctrl unit": "",
          "storage unit": "flash chip",
          "读写单元": "页",
          "擦除单元": "块,每个块包含若干页"
        },
        "disk": {
          "数据记录方式": {
            "rz": "1正向脉冲,0反向脉冲,信息间无脉冲",
            "nrz": "1正向脉冲,0反向脉冲",
            "nrz1": "1脉冲方向改变,0脉冲方向不变"
          },
          "编址单位": "扇区",
          "地址形式": "磁道号-盘面号-扇区",
          "index": {
            "位密度": "磁盘所有磁道记录的信息量相等,并不是圆越大记录的越多,所以每个磁道的位密度是不同的"
          },
          "磁盘的组织和管理": {
            "磁盘分区C:": {
              "引导控制块": "分区第一块,非活动分区则为空",
              "分区控制块": "保存分区信息,包括超级块,位示图等",
              "目录结构": "目录文件组织",
              "文件控制块/inode": "各文件"
            },
            "访问": {
              "时间": "寻道时间+旋转延迟+传输时间"
            },
            "调度算法": {
              "先来先服务FCFS": "未对寻道优化",
              "最短寻道时间优先SSTF": "选择距离当前磁道最近的磁道,不能保证平均寻道时间最短,可能导致饥饿",
              "扫描算法/电梯算法scan": "当前移动方向的最近磁道",
              "循环扫描c-scan": "磁头单向移动,消除电梯算法对两端磁道的不公平"
            }
          },
          "文件系统": {
            "层次结构": {
              "用户接口": "gui/shell",
              "文件目录系统": "查找目录,获取inode等",
              "存取控制验证": "auth确认",
              "逻辑文件系统": "获取文件逻辑地址",
              "物理文件系统": "由逻辑地址到物理地址的转化"
            },
            "虚拟文件系统": {
              "作用": "采用标准的系统调用读写位于不同物理介质上的不同文件系统",
              "挂载": "额外的一个文件系统与根文件系统的某个现存目录建立关系,使得该目录成为其他文件的访问入口"
            }
          },
          "目录": {
            "本质": "一个外存文件",
            "目录项": "文件名和指向该文件inode的指针构成",
            "单级目录": "不允许重名,查找慢",
            "两级目录": "主目录,用户目录,不灵活",
            "树形目录": "绝对路径,相对路径,叶子节点是文件,非叶子是目录"
          },
          "file": {
            "inode": {
              "host": "文件主标识符",
              "type": "文件类型:普通文件,目录文件,特别文件",
              "auth": "各类用户存取权限",
              "es_ad": "外存物理地址-盘块编号",
              "len": "文件长度",
              "link": "本文件系统中所有指向该文件的文件名的指针数",
              "time": "各类时间"
            },
            "操作": {
              "fopen": {
                "进程inode extends inode": {
                  "id": "内存索引结点标识",
                  "stat": "inode是否上锁或修改",
                  "count": "访问进程数",
                  "device": "文件系统的逻辑设备号",
                  "ptr": "分别指向空闲链表和散列队列的指针"
                },
                "FILE": {
                  "文件指针": "当前读写位置",
                  "_cnt": "缓冲区相对位置",
                  "open count": "文件打开计数",
                  "__FILE__": "文件磁盘位置",
                  "访问权限": ""
                }
              },
              "fclose": "关闭文件"
            },
            "结构": {
              "逻辑结构": [
                "流式文件",
                "记录式文件(顺序,索引,索引顺序)",
                "散列文件(哈希文件)"
              ],
              "物理结构": {
                "外存分配方式": {
                  "连续分配": "快速,无法动态增减,定期紧缩",
                  "链接分配": {
                    "隐式链接": "每个盘块都下一个盘块的指针,访问效率低,可靠性差",
                    "显式链接FAT": "链接每个物理快的指针显式的存放在内存一张表中,每个磁盘设置一张链接表,文件分配表"
                  },
                  "索引分配": {
                    "特点": "每个文件设置一个索引块,索引块存放索引表,索引表每个表项对应分配一个物理块",
                    "优点": "支持直接访问,不产生外部碎片,文件长度不限",
                    "缺点": "增加系统存储开销,两次访问外存,降低了存取速度",
                    "单级索引": "一个索引块即只有一个索引表",
                    "二级索引": "两级索引表",
                    "混合索引": "直接地址项,一次间址(一次索引分配),二次间址(二次索引分配)"
                  }
                },
                "空闲空间管理": {
                  "空闲文件表法": "表项:空闲区第一个空闲盘块号|空闲盘块数目",
                  "空闲链表法": "空闲块链接成链表",
                  "位示图法": "每一位代表一个盘块的状态",
                  "成组链接法(unix)": {
                    "分配": "超级块不止一块,出栈;超级块就剩下一个索引块,则将索引块调入主存超级块中,把该索引块分配",
                    "回收": "超级块没满,则入超级块栈;超级块满了,内存超级块写入该回收块,内存超级块入栈该回收块"
                  }
                }
              }
            },
            "共享": {
              "硬链接": "基于inode的共享,两个不同的目录项指向相同的inode",
              "快捷方式": "实际上是一个后缀.link的文件，这个文件只有在windows图形界面下点击才能到达目标文件路径，在命令行下仅是一个文件而已无快捷效果",
              "软链接": [
                "也是一个目录文件但是携带链接属性(l)，这个文件在图形界面与快捷方式无异，但在命令行下，程序会把它当做一个目录。",
                "只有文件拥有者拥有指向inode的指针,其他共享该文件的用户只有该文件的路径名"
              ]
            },
            "保护": {
              "数据结构": [
                "访问控制矩阵",
                "访问控制表",
                "用户权限表"
              ],
              "口令": "FCB中附上相应口令,访问时需提供,不安全",
              "密码": "对文件进行加密,保密性强,但是编码和译码需要时间"
            }
          }
        }
      },
      "人机交互": [
        "键鼠",
        "显示器"
      ],
      "网络设备": [
        "网络接口",
        "调制解调器"
      ]
    },
    "IO软件层次结构": {
      "用户层软件": {
        "角色": "内核态的系统调用封装成库函数",
        "操作系统向用户层暴露的api": [
          "get/put 系统调用：向字符设备缓冲区读/写一个字符。",
          "read/write 系统调用：向块设备的读/写指针位置读/写多个字符。",
          "seek 系统调用：修改读/写指针位置。",
          "socket 系统调用：创建一个网络套接字，需指明网络协议。",
          "bind 系统调用：将套接字绑定在某个本地端口。",
          "connect 系统调用：将套接字连接到远程地址。",
          "read/write 系统调用：从套接字读/写数据。"
        ],
        "SPOOLing": {
          "功能": "把一台物理设备虚拟成逻辑上的多台设备，可将独占式设备改造成共享设备,排队转储技术",
          "核心思想": "联机的方式达到脱机的效果",
          "组成": {
            "输入井/输出井": "磁盘上开辟出来的两个存储区域",
            "输入缓冲区/输出缓冲区": "内存中开辟出来的两个缓冲区",
            "输入进程/输出进程": "模拟外围控制机"
          },
          "步骤": [
            "用户进程提出输出打印的请求",
            "假脱机管理进程在磁盘输出井中为进程申请一个空闲缓冲区，并将要打印的数据送入其中；",
            "为用户进程申请一张空白的打印请求表，并将用户的打印请求填入表中，再将该表挂到假脱机文件队列上。",
            "打印机空闲时，输出进程会从文件队列的队头取出一张打印请求表，根据表中的要求将要打印的数据从输出井传送到输出缓冲区，再输出到打印机进行打印。"
          ]
        }
      },
      "设备独立性软件": {
        "功能": "与设备的硬件特性无关的功能几乎都在这一层实现。",
        "具体内容": {
          "接口": "向用户层软件暴露标准api",
          "设备保护": "在 UNIX 系统中，设备被看做是一种特殊的文件，每个设备也会有对应的 FCB",
          "缓冲": {
            "默认": "一个缓冲区的大小就是一个块",
            "单缓冲": "",
            "双缓冲": "",
            "循环缓冲": "",
            "缓冲池": "空缓冲队列、装满输入数据的缓冲队列（输入队列）、装满输出数据的缓冲队列（输出队列）。"
          },
          "分配": {
            "系统设备表SDT": "记录了系统中全部设备的情况，每个设备对应一个表目。每个表目存有 DCT（设备控制表）的指针，以及设备类型（即逻辑设备名）",
            "设备控制表DCT": "系统为每个设备配置一张 DCT，用于记录设备情况。每个表目存有 COCT（控制器控制表）的指针",
            "控制器控制表COCT": "每个设备控制器（即 I/O 接口）都会对应一张 COCT，操作系统根据 COCT 的信息对控制器进行操作和管理。每个表目存有 CHCT（通道控制表）的指针",
            "通道控制表CHCT": "每个通道都会对应一张 CHCT，操作系统根据 CHCT 的信息对通道进行操作和管理"
          }
        }
      },
      "设备驱动软件": {
        "特点": "具体细节只有设备的厂家才知道。因此厂家需要根据设备的硬件特性设计并提供相应的驱动程序。",
        "功能": "接受来自上层的设备独立性软件的抽象请求,将这些请求转换成设备控制器可以接受的具体命令",
        "过程": [
          "抽象请求转换成具体命令",
          "检查请求合法性",
          "读出检查接口中的设备状态",
          "传送必要参数",
          "设置工作方式",
          "启动IO设备"
        ]
      },
      "中断处理程序": {
        "特点": "IO设备的中断服务程序和任何进程无关"
      },
      "硬件": "执行IO操作"
    },
    "IO接口/设备控制器": {
      "作用": [
        "接收识别cpu各种io指令",
        "实现数据交换",
        "记录设备状态",
        "识别设备地址",
        "对io数据进行缓冲",
        "数据差错控制"
      ],
      "数据通路": {
        "作用": [
          "缓解io和m之间的速度不一致,缓冲作用",
          "数据串并格式转换"
        ],
        "端口": "寄存器"
      },
      "控制通路": {
        "作用": [
          "传送cpu指令和设备反馈信号,满足中断处理要求",
          "选择设备"
        ],
        "INTR": "中断请求触发器",
        "MASK": "屏蔽触发器",
        "设备编码器": "中断向量地址形成部件,其输入来自于排队器的输出intr1,intr2,...,该二进制代码即为中断向量.位数与计算机可以处理中断源的个数有关,即一个中断源对应一个向量地址"
      },
      "bus": [
        "data",
        "cmd",
        "stat",
        "sel"
      ],
      "addressing": {
        "统一编址": "减少了主存容量,不需要io指令",
        "不统一编址": "必须使用独立的io指令."
      }
    },
    "methods": {
      "程序查询方式": "用户主动循环查询io请求",
      "程序中断方式": {
        "请求": "cpu",
        "时间": "指令周期结束时",
        "依赖": "程序",
        "过程": {
          "发布预约": "启动io命令",
          "乙方工作": "输入数据缓冲器,完成后准备就绪",
          "提交": "mask=0时,向cpu发出中断查询信号",
          "排队取号": "intr送至排队器",
          "场所地址": "intr输出排队器送至编码器形成向量地址,送至pc作为下一条指令地址",
          "房间号": "向量地址存放一条无条件转移指令,指向中断服务程序入口地址",
          "看病": "最后一条指令是中断返回指令,返回原程序断点处"
        },
        "保护现场": {
          "保护程序断点": "中断隐指令",
          "保护通用寄存器和psw": "中断服务程序完成"
        }
      },
      "DMA": {
        "适用": "高速io",
        "请求": "总线控制权",
        "优先级": "高于程序中断方式",
        "依赖": "完全由硬件进行成组信息交换,DMA和cpu同时访问m,DMA优先",
        "时间": "指令周期的任意存储周期结束时相应",
        "特点": "不需要保护现场",
        "交换方式": {
          "cpu等待": "es和m之间的速差使得主存效能未充分发挥,浪费了很大一部分主存周期",
          "周期挪用": {
            "cpu正在访存": "必须等待存储周期结束后",
            "同时访存": "cpu暂时放弃bus权,io设备挪用一个或几个存储周期",
            "特点": "每挪用一个主存周期都要申请总线控制权,建立总线控制权和放弃总线控制权"
          },
          "交替访存": "用于cpu周期比主存周期长的情况,将一个cpu周期划分为一个cpu访存周期和dma访存周期,不需要总线使用权的申请过程,通过分时控制,效率高"
        },
        "接口": {
          "cu": "管理dma传送过程",
          "ar": "数据块在主存的首地址",
          "wc": "存放交换数据的字数,取反的补码,每次加一,等于0时溢出",
          "dar": "设备地址寄存器",
          "br": "数据缓冲器",
          "中断机构": "wc溢出时,表示一批数据交换完毕,中断机构向cpu提出中断请求,请求cpu对dma进行后处理"
        },
        "过程": {
          "预处理": "指明传输方向,设备号dar,m内地址ar,传输字数wc",
          "传送": "eq数据写入br,并向dma发出dreq请求,dma向cpu申请hrq总线控制权,cpu发出hlda信号表示申请成功,ar送至地址总线,br写入m,修改ar和wc",
          "后处理": "校验数据,是否继续dma传送,测试错误"
        }
      },
      "通道": {
        "概念": "从属cpu的专用处理器,通道具有专用的通道指令,能独立执行用通道指令编写的io程序",
        "通道指令": "通道控制字,存放在m中,不属于cpu指令系统,"
      }
    }
  },
  "指令": {
    "寻址": {
      "EA": "有效地址",
      "(EA)": "操作数",
      "A": "形式地址",
      "立即寻址": "直接给出操作数;初始化赋值",
      "直接寻址": "EA = A,",
      "间接寻址": "EA = (A),一次间接寻址取操作数访存两次,n次要访n+1次,子程序返回和查表",
      "r寻址": "EA = R;减少指令长度",
      "r间接寻址": "EA = (R),循环程序",
      "基址寻址": "EA = A + (BR);多道程序,BR由os管理",
      "变址寻址": "EA = A + (IX);数组问题和循环程序,ix可变",
      "相对寻址": "EA = (PC) + A;转移指令,浮动程序"
    },
    "指令集": {
      "CISC": [
        "寄存器多",
        "指令数目庞大",
        "长度不固定",
        "格式多",
        "寻址方式多",
        "可以访存的指令不受限制",
        "指令执行时间相差很大,需要多个时钟周期完成",
        "微程序控制",
        "难优化"
      ],
      "RISC": [
        "指令长度固定",
        "格式少",
        "寻址方式少",
        "有多个通用寄存器",
        "只有load/store访存",
        "流水线",
        "组合逻辑控制",
        "优化编译程序"
      ]
    }
  },
  "CPU": {
    "性能": {
      "机器的速度相关": [
        "主频",
        "机器周期所含时钟周期数",
        "指令周期所含机器周期数"
      ],
      "周期": [
        "指令周期(指令执行速度)",
        "机器周期",
        "时钟周期(主频)"
      ]
    },
    "功能": [
      "指令控制",
      "操作控制",
      "时间控制",
      "数据控制",
      "中断处理"
    ],
    "指令执行方案": {
      "单指令周期": "一个固定的指令周期",
      "多指令周期": "可变指令周期",
      "流水线": "争取在每个时钟脉冲周期完成一条指令的执行过程"
    },
    "指令执行过程": {
      "取指": {
        "push": "(pc) -> MAR, 1->R",
        "pull": "M(MAR) -> MDR",
        "ID": "(MDR)->IR,OP(IR)->CU",
        "++": "(PC)+1->PC"
      },
      "间址": {
        "push": "ad(IR)->MAR, 1->R",
        "pull": "M(MAR)->MDR"
      },
      "执行": "",
      "中断": {
        "save": "(SP)-1->SP,(SP)->MAR,1->W,(PC)->MDR,(MDR)->M(MAR)",
        "redirect": "ad(intr)->PC",
        "closeInt": "0 -> EINT"
      },
      "控制方式": {
        "同步控制方式": {
          "完全统一节拍的机器周期": "浪费",
          "不同节拍的机器周期": "",
          "中央控制和局部控制的机器周期": ""
        }
      }
    },
    "数据通路": {
      "功能": "实现alu和R,以及R之间的数据交换",
      "结构": [
        "片内总线",
        "专用通路"
      ]
    },
    "指令结构": {
      "指令": ""
    },
    "控制单元": {
      "外特性": {
        "输入": {
          "OP(IR)": "OP(IR)送入cu译码",
          "flag(PSW)": "有时需要根据上一条指令产生控制信号",
          "CLK": "时钟脉冲解决同步问题",
          "ctrl(bus)": "来自系统控制总线的控制信号,int,dma等"
        },
        "输出": {
          "片内控制信号": "用于R之间的传送和ALU的操作",
          "系统控制信号": "命令主存或者io,中断响应等"
        }
      },
      "组合逻辑设计": "速度快,维护性差,不灵活,制造周期长",
      "微程序控制": {
        "特点": "维护性好,速度慢",
        "微程序结构": {
          "微程序": "一条指令 = 一个微程序,取指令操作单独设置一个微程序,间址令和中断也可以单独设置",
          "微指令": {
            "概念": "一个程序由若干条微指令构成,一个微指令对应多个微命令,存放在控制存储器CM中,地址称为微地址",
            "微指令周期": "读出并执行微指令的周期",
            "控制方式": {
              "直接编码": "微命令字段中每一位都代表一个微命令",
              "字段直接编码": "微命令字段分割为若干段,互斥性微命令组合在一个字段中,相容性微命令放在另一字段中,每个字段独立编码",
              "字段间接编码": "一个字段的某些微命令需要另一个字段中的某些微命令来解释,进一步缩短微指令字长"
            }
          },
          "微命令": "微指令的二进制op码形成的微命令,微操作的控制信号",
          "微操作": "CPU根据微命令执行微操作,微命令的执行过程"
        },
        "控制单元结构": {
          "微地址形成部件": "根据OP(IR)形成",
          "顺序逻辑": {
            "作用": "控制微指令序列",
            "输入": "next(CMDR),CLK,flags",
            "序列地址形成": {
              "断定方式": "下地址决定",
              "编码器编码": "根据op(IR)形成",
              "条件转移": "分支转移,根据各种标志"
            }
          },
          "CMAR": "控制地址寄存器",
          "控制存储器CM": {
            "物理逻辑": "ROM",
            "作用": "存放微程序",
            "格式": {
              "水平型微指令": "并行性好,用较长的微指令结构换取较短的微程序结构",
              "垂直型微指令": "并行性差,用较长的微程序结构换取较短的微指令结构"
            }
          },
          "CMDR": "操作控制字段|顺序控制字段"
        }
      }
    },
    "指令流水": {
      "作用": "提高处理器的速度",
      "阶段": {
        "取指": "",
        "译码": "",
        "执行": "",
        "写回": ""
      },
      "冒险": {
        "结构冒险(资源)": "同时访问一个功能部件所发生的冲突,L1 cache分为数据cache和指令cache",
        "数据冒险": {
          "(应该)读后写WAR": "读到了新数据",
          "(应该)写后读RAW": "读了旧数据",
          "(应该)写后写WAW": "写错了",
          "数据旁路技术": "设置相关专用通路,不等前一条指令把计算结果写会寄存器组,而是把前一条指令的计算结果作为输入数据给下一条需要此结果的指令"
        },
        "控制相关": "由于转移指令引起的断流,猜测法"
      },
      "效率": {
        "吞吐率": "单位时间内流水线完成的指令的数量",
        "加速比": "不使用流水线的时间/使用流水线的时间",
        "效率": "n个任务展示空图的有效面积/n个任务所用时间与k个流水段所围成的时空总面积"
      },
      "超技术": {
        "超标量技术": "每个时钟周期并发执行多条独立指令",
        "超级流水线": "将机器指令化为更多级的操作,减轻每一级的复杂程度",
        "超长指令字": "能并行操作的指令组合成一条具有多个操作码字段的超长指令字",
        "动态流水线": "多种运算可以同时进行"
      }
    },
    "中断": {
      "优先级": {
        "响应优先级": "不可改变,由硬件或者软件决定",
        "处理优先级": "可以使用中断屏蔽字进行调整"
      },
      "中断判优": {
        "硬件实现": "非门,与门使用",
        "软件实现": "中断源的优先等级从高到低逐级查询各中断源是否有中断请求"
      },
      "硬件向量法": "中断向量地址形成部件->向量地址->中断服务程序地址,即M(向量地址) = JMP [向量(中断服务程序地址)]",
      "响应": {
        "条件": [
          "EINT = 1"
        ],
        "时间": "指令执行周期结束后,如果有中断,进入中断周期",
        "方式(中断周期硬件自动完成)": [
          "保存断点",
          "引导中断向量",
          "关中断"
        ],
        "多重中断": [
          "提前设置eint=1",
          "优先级高的有权中断优先级低的中断处理过程"
        ]
      },
      "屏蔽技术": {
        "屏蔽字": "屏蔽触发器->屏蔽寄存器->屏蔽字 = (屏蔽寄存器),每个中断源对应一个屏蔽字,在中断服务程序的开中断之前设置屏蔽字"
      }
    },
    "多处理器": {
      "SISD": "单指令单数据流",
      "SIMD": "单指令多数据流",
      "MIMD": "多指令多数据流",
      "硬件线程": "逻辑内核,逻辑处理器,与CPU绑定,比如SMT，CPU中有两套或多套完整的上下文寄存器组，在进程切换时不需要换上下文寄存器组",
      "多核处理器": "多个处理器核心集成到一个CPU上,每个核都是单独的处理器,拥有自己的alu,寄存器,控制器,cache.内存对多个cpu核是共享的",
      "共享内存多处理器SMP": ""
    }
  },
  "OS": {
    "特点": {
      "并发": "微观分时,宏观同时",
      "共享": "资源非一个程序独占",
      "虚拟": "虚拟cpu,虚拟内存,虚拟设备,虚拟文件系统",
      "异步": "多道程序间执行顺序不可知"
    },
    "内核态": {
      "能力": "执行包括特权指令的一切指令,操作系统内核部分使用",
      "运行程序": {
        "时钟管理": {
          "定时器": "固定频率产生定时器中断,时间片",
          "软件定时器": "操作系统提供以硬件定时器为基础提供一类系统接口，可以提供不限数量的定时器，但是精度较差，超时时长必须是时钟节拍的整数倍。",
          "节拍": ""
        },
        "中断处理": {
          "场景": [
            "io输入",
            "进程管理调度",
            "系统功能的调用",
            "设备驱动",
            "文件访问"
          ]
        },
        "设备驱动": "",
        "进程管理": {
          "进程": "资源分配的基本单位,独立运行的基本单位",
          "进程映像": "程序段,相关数据段,PCB三部分组成的静态实体",
          "PCB": {
            "pid": "进程标识符",
            "next": "该PCB队列的下一个PCB指针",
            "ad": "程序和数据地址",
            "prior": "进程优先级",
            "env": "cpu现场信息,pc,psw,xs",
            "message": "通信信息,与别的进程",
            "contact": "进程家族联系",
            "manifest": "占有资源清单"
          },
          "通信": "",
          "状态": {
            "create": [
              "用户登录",
              "作业调度",
              "请求服务"
            ],
            "repeal": [
              "正常结束",
              "异常结束",
              "外界干预"
            ],
            "block(P)": {
              "阻塞原语": "进程自己调用阻塞原语实现"
            },
            "ready(V)": {
              "唤醒原语": "发现者进程进程调用,将阻塞进程唤醒"
            }
          },
          "调度(CPU使用权)": {
            "进程切换": "调度资源的实际分配,进程切换一定产生中断进行cpu mode切换,但是cpu mode切换不一定发生进程切换",
            "三级调度": [
              "作业调度",
              "中级调度",
              "进程调度"
            ],
            "进程调度": "会将所有该进程相关的情况(包括PC,Xs,外部资源如进程所使用的内存、打开的文件和网络连接等),堆栈,和状态特征记录(包括PSW等)在进程PCB中",
            "内核线程调度(只同一进程内调度)": "仅需切换PC,寄存器,和栈,上下文是进程上下文的子集,系统开销小",
            "不能进行调度的时刻": [
              "处理中断过程中",
              "os内核程序临界区",
              "原子操作:加锁,解锁,中断现场保护,恢复"
            ],
            "常见调度算法": {
              "先来先服务": "不利于短进程",
              "短作业优先": "长作业可能饥饿",
              "优先级调度": {
                "静态优先级": "系统进程>用户进程,前台>后台进程,运行时间越长,优先级越低;用户收费越高,优先级越高",
                "动态优先级": "进程占有CPU的时间长短,就绪进程等待CPU的时间长短"
              },
              "时间片轮转": {
                "时间片大小确定": "与系统响应时间,进程数目,系统处理能力有关,T = N * q"
              },
              "高响应比": "响应比 = (作业等待时间 + 估计运行时间)/估计运行时间",
              "多级队列": "每个进程固定属于一个队列,每一个队列采用一种算法",
              "多级反馈队列": "多个就绪"
            }
          },
          "同步与互斥": {
            "互斥": {
              "准则": ["空闲让进","忙则等待","有限等待","让权等待"]
            }
          },
          "线程": {
            "内涵": "基本的 CPU 执行单元，也是程序执行流的最小单位。",
            "作用": "引入线程后，不仅是进程之间可以并发，进程内的各线程之间也可以并发，从而进一步提升了系统的并发度，使得一个进程内也可以并发处理各种任务（如 QQ视频、文字聊天，传文件等等）",
            "结果": "引入线程后，进程是资源分配的基本单位，线程是调度的基本单位",
            "并发性": "传统进程机制中，只能进程间并发;引入线程后，各线程之间也能并发，提升了并发度",
            "开销": [
              "传统的进程间并发，需要切换进程的运行环境，系统开销很大",
              "线程间并发，如果是同一个进程内的线程切换，则不需要切换进程环境，系统开销小",
              "引入线程后，并发所带来的系统开销减小"
            ],
            "多cpu": "多 CPU 计算机中，各个线程可占用不同的 CPU",
            "通信": "由于共享内存地址空间，同一进程中的线程间通信甚至无需系统干预",
            "资源": "同一进程的不同线程间共享进程的资源",
            "用户级ULT": "通过程序员实现的线程库来实现多线程,线程切换可以在用户态下完成，无需操作系统的干涉,当一个用户级线程被阻塞后，整个进程都会被阻塞，并发度不高。多个线程不可在多核处理机上并行运行",
            "内核级线程KLT": "管理工作由操作系统内核完成,因此内核级线程的切换必然需要在核心态下才能完成,操作系统会为每个内核级线程建立相应的 TCB（Thread Control Block，线程控制块），通过 TCB 对线程进行管理。“内核级线程”就是“从操作系统内核视角能看到的线程”",
            "逻辑": [
              "用户级线程是“代码逻辑”的载体",
              "内核级线程是“运行机会”的载体（内核级线程才是处理机分配的单位）"
            ]
          }
        },
        "内存管理": {
          "逻辑地址": {
            "概念": "从程序的编译和链接入手理解",
            "逻辑地址空间": {
              "内核区": "最高地址,所有进程的内核页表映射向相同的物理地址",
              "共享区": "包括共享库和文件存储映射mmap",
              "程序区": "instruction",
              "静态存储区": {
                "常量区": [
                  "constant",
                  "constant variable"
                ],
                "变量区": [
                  "public variable",
                  "static variable"
                ]
              },
              "动态存储区": {
                "堆": "动态变量存放的位置,new",
                "栈": "自动变量包括函数形式的参数"
              }
            }
          },
          "物理地址": "",
          "内存保护": {
            "上下界寄存器法": "",
            "基址和界地址寄存器法": "基址寄存器:重定位寄存器,界地址寄存器:限长寄存器"
          },
          "内存空间管理": {
            "分区分配": {
              "单一": "单道批处理系统,使用覆盖技术",
              "固定": "分区说明表维护静态重定位程序",
              "动态": {
                "优点": [
                  "多道程序共用主存",
                  "管理方案简单",
                  "存储保护简单"
                ],
                "缺点": [
                  "外部碎片",
                  "无法实现多进程共享内存",
                  "无法实现主存的扩充,进程地址空间受到实际存储空间限制"
                ],
                "数据结构": [
                  "空闲分区表",
                  "空闲分区链"
                ],
                "分配算法": {
                  "首次适应": "每次从队首开始找",
                  "下次适应": "队列循环开始找",
                  "最佳适应": "队列从小到大排列",
                  "最差适应": "队列从大到小排列"
                },
                "回收": "邻接空闲合并,非邻接空闲单独建立表项插入空闲分区表适当位置",
                "动态管理": {
                  "拼接技术": "紧缩",
                  "动态重定位分区分配技术": ""
                }
              }
            },
            "页式分配": {
              "页": "进程的逻辑地址空间分成若干大小相等的区域",
              "块": "物理存储空间分成若干大小相等的区域,大小等于页",
              "页表项": "(页号)|物理地址",
              "基本地址变换机构": {
                "页表寄存器PTR": "记录页表在内存中的起始位置(F)和长度(M)",
                "快表TLB": "并行查找能力的高速缓冲存储器/相联存储器",
                "多极页表": "多次访存,整张页表需要连续的存放在内存中",
                "共享保护": {
                  "地址越界保护": "逻辑地址页号>PTR(M),越界",
                  "访问控制保护": "页表中由访问控制项控制"
                }
              },
              "优点": [
                "m利用率高",
                "离散分配",
                "便于存储访问控制",
                "无外部碎片"
              ],
              "缺点": [
                "需要硬件支持",
                "内存访问效率下降",
                "共享困难",
                "有内部碎片"
              ]
            },
            "段式分配": {
              "优点": [
                "方便编程",
                "信息共享,便于动态链接和共享",
                "信息保护",
                "无内部碎片"
              ],
              "缺点": [
                "与分页相似需要硬件支持",
                "解决外部碎片需要使用拼接技术",
                "分段最大尺寸受到主存可用空间的限制",
                "有外部碎片"
              ],
              "分段逻辑地址空间": "二维,段号|段内偏移",
              "段表项": "(段号)|段长|物理地址",
              "共享和保护": {
                "地址越界保护": [
                  "段号>段表长,越界",
                  "段内偏移>段长,越界"
                ],
                "访问控制保护": "段表中的访问控制字段控制"
              }
            },
            "段页式": {
              "特点": "系统为每个进程分配一张段表,每个段分配一张页表"
            }
          },
          "虚拟内存管理": {
            "支持": [
              "相当数量的外存",
              "一定容量的内存",
              "中断机构",
              "地址变换机构",
              "相关数据结构,段表或页表"
            ],
            "请求分页": {
              "页表项": [
                "有效位stat",
                "算法位algo",
                "修改位dirt",
                "页号page",
                "块号b",
                "外存地址es"
              ],
              "缺页中断": "及时响应,一条指令可以产生多个缺页中断",
              "页面淘汰算法": {
                "最佳置换opt": "实际不存在,淘汰以后最迟使用的页面",
                "先进先出fifo": "淘汰最先进入内存的page,可能产生belady异常,实际效果不好",
                "最近最少使用lru": "最近最长时间没有被使用的页面淘汰,性能较好",
                "时钟置换clk/最近未使用nru": "维护一个内存中所有页面的循环链表,指针指向上次淘汰的下一个页面",
                "clk-pro(算法位,修改位),循环两次": [
                  "寻找(0,0),不改算法位和修改位",
                  "寻找(0,1),没替换的页面(0,x)"
                ],
                "belady": "fifo出现,缺页率随着被分配的物理块数的增加而增加",
                "抖动": "页面置换算法不合适,页面频繁调入调出"
              },
              "工作集": "最近n次内存访问的页面的集合,n叫工作集窗口",
              "页面分配策略": {
                "(const,partial)": "导致有些进程频繁缺页",
                "(var,public)": "可变分配全局替换,维护一个空闲物理块队列,有进程缺页就分配一个,空队列后淘汰页面",
                "(var,partial)": "频繁缺页分配额外的物理块"
              },
              "页面调入策略": {
                "调入位置": {
                  "对换区": "连续分配方式存储文件,比文件区的io速度块",
                  "没有足够的对换区": "不被修改的文件直接从文件区调入(不需被调出),被修改的文件复制到对换区调出"
                },
                "请求调入": "请求页面调入",
                "预调入": "局部性原理一次调入多个页面"
              }
            }
          }
        },
        "设备管理": ""
      },
      "特权指令": [
        "io指令",
        "设置中断屏蔽指令",
        "清内存指令",
        "存储保护指令",
        "设置时钟指令"
      ]
    },
    "用户态": {
      "用户接口": {
        "命令接口": "联机接口:cmd窗口,脱机接口:bat文件",
        "程序接口": {
          "trap": "系统调用,缺页中断等都属于范畴",
          "系统调用": {
            "内涵": "系统调用进入内核态执行系统程序",
            "能力": [
              "进程控制",
              "文件系统控制",
              "系统控制",
              "内存管理",
              "网络管理",
              "socket控制",
              "用户管理",
              "进程通信"
            ]
          }
        },
        "图形接口": "gui"
      }
    },
    "分类": {
      "脱机技术": "使用外围机进行程序的输入输出,是对人工操作的加速(因为没有存储器)",
      "批处理系统": {
        "单道批处理": "作业脱机输入方式写入磁带,监督程序管理下按序运行",
        "多道批处理": "进一步提高cpu利用率,宏观并行,微观串行"
      },
      "分时系统": "交互性",
      "实时系统": "及时响应和高可靠性"
    },
    "程序加载": {
      "编译": "编译器将源代码编译成若干个CPU可执行目标代码模块",
      "链接": {
        "概念": "链接器将目标模块和库函数链接在一起,形成一个完整的装入模块",
        "静态链接": "装入前直接链接",
        "装入时动态链接": "装入时将多个目标模块边装入边链接",
        "运行时动态链接": "需要该模块时才会链接"
      },
      "装入": {
        "内容": "装入器将装入模块装入内存,其中涉及到逻辑地址重定位到物理地址的地址映射",
        "绝对装入": "编译时直接定位,编译后的程序将产生绝对地址的目标代码",
        "静态重定位": "作业一但装入内存,运行期间不能移动和再申请内存,适用于分区分配",
        "动态重定位": "装入内存的地址均为相对地址,地址转换在程序真正执行的时候进行,需要重定位寄存器的支持"
      },
      "os引导": {
        "legacy+MBR": {
          "active": "cpu激活,boot启动BIOS",
          "post": "BIOS进行加电自检,通知cpu硬件设备的中断向量地址",
          "boot-cd": "bios读取cmos中的boot sequence,一次加载MBR,寻找引导硬盘",
          "partition": "mbr获权通过dpt查找活动分区",
          "loader": "pbr查找分区下的loader地址",
          "boot": "启动loader引导os初始化",
          "init": {
            "载入kernel.dll": "",
            "加载内核头程序": "全局段描述表,中断描述表,页表结构初始化",
            "加载sbin/init": "根据配置文件产生init进程,pid=1,完成中断处理初始化,内存管理初始化,进程管理初始化,文件系统初始化",
            "2号进程": "管理调度其他内核线程,内核初始化结束,用户可以创建进程",
            "加载其他模块": "窗口程序和网络程序:直到执行login程序,跳出登录界面"
          }
        }
      }
    }
  }
}